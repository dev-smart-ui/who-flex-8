"use strict";var newPassErrorMessage=document.getElementById("newPass-error-message"),newPssword=document.querySelectorAll(".newPassword"),confirmNewPassInput=document.getElementById("confirmNewPass"),confirmNewPassErrorMessage=document.getElementById("confirmNewPass-error-message"),newPassInput=document.getElementById("newPass");function resetPass(e){e.addEventListener("change",(function(){e.value.length<8&&(newPassErrorMessage.classList.remove("d-none"),newPssword.forEach((function(e){e.style.border="1px solid #ea4335"})))})),e.addEventListener("input",(function(){e.value.length>=8&&(newPssword.forEach((function(e){e.style.border="1px solid #e0c463"})),newPassErrorMessage.classList.add("d-none"))}))}function repeatPass(){confirmNewPassInput.value.length>=8&&(confirmNewPassInput.nextElementSibling.style.border="1px solid #e0c463")}function Mask(){document.querySelectorAll(".password-wrap").forEach((function(e){var s=e.previousElementSibling;s.addEventListener("input",(function(){e.value=s.value;var n=e.dataset.sign;e.value=e.value.replace(/[\s\S]/g,n)})),e.addEventListener("input",(function(){var s,n=e.previousElementSibling,t="",a=e.dataset.sign;n.value.length<e.value.length?(n.value=n.value+e.value[e.value.length-1],t=n.value):(s=n.value.length-e.value.length,t=(t=n.value).substring(0,String(t).length-s),n.value=t),e.value=e.value.replace(/[\s\S]/g,a)}))}))}function comparisonPassword(){event.preventDefault(),newPassInput.value===confirmNewPassInput.value&&newPassInput.value.length>=8?(confirmNewPassInput.nextElementSibling.style.border="1px solid #e0c463",confirmNewPassErrorMessage.classList.add("d-none")):(confirmNewPassInput.nextElementSibling.focus(),confirmNewPassErrorMessage.classList.remove("d-none"),confirmNewPassInput.nextElementSibling.style.border="1px solid #ea4335"),""===confirmNewPassInput.value&&confirmNewPassInput.nextElementSibling.focus(),""===newPassInput.value&&newPassInput.focus(),confirmNewPassInput.value.length<8&&""!==confirmNewPassInput.value&&(confirmNewPassErrorMessage.classList.remove("d-none"),confirmNewPassInput.nextElementSibling.style.border="1px solid #ea4335"),confirmNewPassInput.addEventListener("keyup",(function(){confirmNewPassInput.value===newPassInput.value&&(confirmNewPassErrorMessage.classList.add("d-none"),confirmNewPassInput.nextElementSibling.style.border="1px solid #dddddd")}))}function showPass(){document.querySelectorAll(".showPass").forEach((function(e){e.classList.add("d-none");var s=e.closest(".password-form-wrap").querySelector(".password-wrap");s.addEventListener("keyup",(function(){s.value.length>0?e.classList.remove("d-none"):e.classList.add("d-none")})),e.addEventListener("click",(function(){var n=s.previousElementSibling;"text"===n.type?(n.type="password",n.style.display="none",s.style.display="block",e.classList.remove("view")):(n.type="text",n.style.display="block",s.style.display="none",e.classList.add("view")),s.focus(),s.selectionStart=s.value.length}))}))}document.getElementById("openModal").addEventListener("click",(function(){document.getElementById("modalPassword").classList.add("active")})),document.getElementById("closeModalPassword").addEventListener("click",(function(){document.getElementById("modalPassword").classList.remove("active")})),Mask(),showPass();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
